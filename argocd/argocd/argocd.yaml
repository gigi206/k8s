# https://rtfm.co.ua/en/argocd-users-access-and-rbac/
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argo-cd
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # Fix bug
  ignoreDifferences:
    - kind: ConfigMap
      name: argocd-cm
      # namespace: argo-cd
      # group: apps # kubectl api-resources | grep Deployment | awk '{ print $3 }' | awk -F'/' '{ print $1 }'
      jsonPointers:
        - /data/url
  destination:
    namespace: argo-cd
    server: 'https://kubernetes.default.svc'
  project: default
  source:
    chart: argo-cd
    repoURL: 'https://argoproj.github.io/argo-helm'
    targetRevision: '7.2.0'
    helm:
      parameters:
        - name: global.domain
          value: argocd.gigix
        # insecure is needed if you want to use ingress without TLS (no certificates)
        # Cf https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts
        # - name: configs.params.server\.insecure
        #   value: 'true'
        # - name: 'server.extraArgs[0]'
        #   value: '--insecure'
        - name: dex.enabled
          value: 'false'
        # - name: server.configEnabled
        #   value: "true"
        # - name: server.config.url
        #   value: https://argocd.gigix
        # https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/
        # - name: oidc.config
        #   value: |
        #     name: Keycloak
        #     issuer: https://keycloak.gigix/realms/<realm>
        #     clientID: argocd
        #     clientSecret: $oidc.keycloak.clientSecret
        #     requestedScopes: ["openid", "profile", "email", "groups"]
        # - name: server.config.policy\.default
        #   value: role:readonly
        # - name: server.config.accounts\.gigix
        #   value: apiKey, login
        # - name: >-
        #     server.service.annotations."external-dns\.alpha\.kubernetes\.io/hostname"
        #   value: argocd.gigix
        # - name: server.service.type
        #   value: LoadBalancer
        # - name: server.additionalApplications[0].name
        #   value: myapp
        # - name: server.additionalApplications[0].namespace
        #   value: argo-cd
        # - name: server.additionalApplications[0].projet
        #   value: system
        # - name: server.additionalApplications[0].source.repoURL
        #   value: 'https://xxx'
        # - name: server.additionalApplications[0].source.chart
        #   value: 'xxx'
        # - name: server.additionalApplications[0].source.targetRevision
        #   value: '1.0.0'
        # - name: server.additionalApplications[0].destination.namespace
        #   value: myapp
        # - name: server.additionalApplications[0].destination.server
        #   value: 'https://kubernetes.default.svc'
        # - name: server.additionalApplications[0].source.helm.parameters.xxx
        #   value: ''
        # - name: server.additionalApplications[0].syncPolicy.syncOptions[0]
        #   value: CreateNamespace=true
        # - name: server.additionalApplications[0].syncPolicy.syncOptions[1]
        #   value: PruneLast=true
        # - name: server.additionalProjects[0].name
        #   value: system
        # - name: server.additionalProjects[0].namespace
        #   value: argo-cd
        # - name: server.additionalProjects[0].sourceRepos[0]
        #   value: git@github.com:gigi206/xxx.git
        # - name: server.additionalProjects[0].destinations[0].namespace
        #   value: argocd-system
        # - name: server.additionalProjects[0].destinations[0].server
        #   value: https://kubernetes.default.svc
        - name: server.ingress.enabled
          value: 'true'
        - name: server.ingress.tls
          value: 'true'
        - name: server.ingress.ingressClassName
          value: nginx
        - name: server.ingress.hosts[0]
          value: argocd.gigix
        - name: server.ingress.extraTls[0].secretName
          value: argocd-cert-tls
        - name: server.ingress.extraTls[0].hosts[0]
          value: argocd.gigix
        - name: >-
            server.ingress.annotations.cert-manager\.io/cluster-issuer
          value: selfsigned-cluster-issuer
        # Nginx
        - name: >-
            server.ingress.annotations.nginx\.ingress\.kubernetes\.io/server-alias
          value: argocd
        - name: >-
            server.ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-passthrough
          value: "true"
        - name: >-
            server.ingress.annotations.nginx\.ingress\.kubernetes\.io/force-ssl-redirect
          value: "true"
        - name: >-
            server.ingress.annotations.nginx\.ingress\.kubernetes\.io/backend-protocol
          value: https
        # Kong
        # - name: server.service.annotations.konghq\.com/protocol
        #   value: https
        # - name: server.ingress.annotations.konghq\.com/https-redirect-status-code
        #   value: "308"
        # - name: server.ingress.annotations.konghq\.com/protocols
        #   value: https
        # HAProxytech
        # - name: server.ingress.annotations.haproxy\.org/server-ssl
        #   value: "true"
        # - name: server.ingress.annotations.haproxy\.org/ssl-passthrough
        #   value: "true"
        # - name: server.ingress.annotations.haproxy\.org/ssl-redirect
        #   value: "true"

        # Enable Prometheus metrics
        - name: applicationSet.metrics.enabled
          value: 'true'
        - name: applicationSet.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        - name: applicationSet.metrics.serviceMonitor.enabled
          value: 'true'
        - name: controller.metrics.applicationLabels.enabled
          value: 'true'
        - name: controller.metrics.enabled
          value: 'true'
        - name: controller.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        # - name: dex.metrics.enabled
        #   value: 'true'
        # - name: dex.metrics.serviceMonitor.additionalLabels.release
        #   value: prometheus-stack
        - name: notifications.metrics.enabled
          value: 'true'
        - name: notifications.metrics.serviceMonitor.enabled
          value: 'true'
        - name: notifications.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        - name: redis-ha.haproxy.metrics.enabled
          value: 'true'
        - name: redis.metrics.enabled
          value: 'true'
        - name: redis.metrics.serviceMonitor.enabled
          value: 'true'
        - name: redis.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        - name: repoServer.metrics.enabled
          value: 'true'
        - name: repoServer.metrics.serviceMonitor.enabled
          value: 'true'
        - name: repoServer.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        - name: server.metrics.enabled
          value: 'true'
        - name: server.metrics.serviceMonitor.enabled
          value: 'true'
        - name: server.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        # Prometheus rules
        - name: controller.metrics.rules.enabled
          value: 'true'
        - name: controller.metrics.rules.additionalLabels.release
          value: prometheus-stack
        - name: controller.metrics.rules.spec[0].alert
          value: ArgoAppMissing
        - name: controller.metrics.rules.spec[0].expr
          value: |-
            absent(argocd_app_info)
        - name: controller.metrics.rules.spec[0].for
          value: 15m
        - name: controller.metrics.rules.spec[0].labels.severity
          value: critical
        - name: controller.metrics.rules.spec[0].annotations.summary
          value: '[Argo CD] No reported applications'
        - name: controller.metrics.rules.spec[0].annotations.description
          value: >-
            Argo CD has not reported any applications data for the past 15 minutes which
            means that it must be down or not functioning properly.  This needs to be
            resolved for this cloud to continue to maintain state.
        - name: controller.metrics.rules.spec[1].alert
          value: ArgoAppNotSynced
        - name: controller.metrics.rules.spec[1].expr
          value: |-
            argocd_app_info{sync_status!="Synced"} == 1
        - name: controller.metrics.rules.spec[1].for
          value: 12h
        - name: controller.metrics.rules.spec[1].labels.severity
          value: warning
        - name: controller.metrics.rules.spec[1].annotations.summary
          value: '[{{`{{$labels.name}}`}}] Application not synchronized'
        - name: controller.metrics.rules.spec[1].annotations.description
          value: >-
            The application [{{`{{$labels.name}}`}} has not been synchronized for over
            12 hours which means that the state of this cloud has drifted away from the
            state inside Git.

        # controller
        # - name: controller.resources.requests.cpu
        #   value: 250m
        # - name: controller.resources.requests.memory
        #   value: 256Mi
        # - name: controller.resources.limits.cpu
        #   value: 500m
        # - name: controller.resources.limits.memory
        #   value: 512Mi
        # # dex
        # - name: dex.resources.requests.cpu
        #   value: 10m
        # - name: dex.resources.requests.memory
        #   value: 32Mi
        # - name: dex.resources.limits.cpu
        #   value: 50m
        # - name: dex.resources.limits.memory
        #   value: 64Mi
        # # redis
        # - name: redis.resources.requests.cpu
        #   value: 100m
        # - name: redis.resources.requests.memory
        #   value: 64Mi
        # - name: redis.resources.limits.cpu
        #   value: 200m
        # - name: redis.resources.limits.memory
        #   value: 128Mi
        # # redis metrics
        # - name: redis.metrics.resources.requests.cpu
        #   value: 10m
        # - name: redis.metrics.resources.requests.memory
        #   value: 32Mi
        # - name: redis.metrics.resources.limits.cpu
        #   value: 50m
        # - name: redis.metrics.resources.limits.memory
        #   value: 64Mi
        # # server
        # - name: server.resources.requests.cpu
        #   value: 50m
        # - name: server.resources.requests.memory
        #   value: 64Mi
        # - name: server.resources.limits.cpu
        #   value: 100m
        # - name: server.resources.limits.memory
        #   value: 128Mi
        # # server.extensions
        # - name: server.extensions.resources.requests.cpu
        #   value: 10m
        # - name: server.extensions.resources.requests.memory
        #   value: 64Mi
        # - name: server.extensions.resources.limits.cpu
        #   value: 50m
        # - name: server.extensions.resources.limits.memory
        #   value: 128Mi
        # # repoServer.resources
        # - name: repoServer.resources.requests.cpu
        #   value: 10m
        # - name: repoServer.resources.requests.memory
        #   value: 64Mi
        # - name: repoServer.resources.limits.cpu
        #   value: 50m
        # - name: repoServer.resources.limits.memory
        #   value: 128Mi
        # # repoServer.copyutil
        # - name: repoServer.copyutil.resources.requests.cpu
        #   value: 10m
        # - name: repoServer.copyutil.resources.requests.memory
        #   value: 32Mi
        # - name: repoServer.copyutil.resources.limits.cpu
        #   value: 50m
        # - name: repoServer.copyutil.resources.limits.memory
        #   value: 64Mi
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true
      - ServerSideApply=true
