# Cf https://www.youtube.com/watch?v=iqVt5mbvlJ0
# To specify only nodes where Daemonset must be set please read (nodeSelector):
# - https://medium.com/@cagri.ersen/kubernetes-nginx-ingress-controller-for-on-premise-environments-e64ee3aa04e#ad04
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argo-cd
spec:
  destination:
    namespace: ingress-nginx
    server: 'https://kubernetes.default.svc'
  source:
    chart: ingress-nginx
    repoURL: 'https://kubernetes.github.io/ingress-nginx'
    targetRevision: '4.7.1'
    helm:
      parameters:
        - name: controller.kind
          value: DaemonSet
        - name: controller.ingressClassResource.default
          value: "true"
        # https://docs.gitlab.com/charts/advanced/external-nginx/
        - name: tcp.22
          value: gitlab/gitlab-gitlab-shell:22
        # - name: controller.config.use-forwarded-headers
        #   value: 'true'
        # - name: controller.config.compute-full-forwarded-for
        #   value: 'true'
        # - name: controller.config.use-proxy-protocol
        #   value: 'true'
        # - name: service.externalTrafficPolicy
        #   value: Local
        - name: controller.config.proxy-body-size
          value: 100m
        # Fix CVE-2021-25742 => https://github.com/kubernetes/ingress-nginx/issues/7837
        # - name: controller.allowSnippetAnnotations
        #   value: "false"
        # - name: defaultBackend.replicaCount
        #   value: "1"
        # - name: controller.metrics.enabled # Cf https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx#prometheus-metrics
        #   value: "true"
        # - name: controller.autoscaling.enabled
        #   value: 'true'
        # - name: controller.autoscaling.minReplicas
        #   value: '2'
        # - name: controller.autoscaling.maxReplicas
        #   value: '3'
        # controller
        # - name: controller.resources.requests.cpu
        #   value: 100m
        # - name: controller.resources.requests.memory
        #   value: 512Mi
        # - name: controller.resources.limits.cpu
        #   value: 100m
        # - name: controller.resources.limits.memory
        #   value: 512Mi
        # controller.admissionWebhooks.createSecretJob
        # - name: controller.admissionWebhooks.createSecretJob.resources.requests.cpu
        #   value: 10m
        # - name: controller.admissionWebhooks.createSecretJob.resources.requests.memory
        #   value: 64Mi
        # - name: controller.admissionWebhooks.createSecretJob.resources.limits.cpu
        #   value: 10m
        # - name: controller.admissionWebhooks.createSecretJob.resources.limits.memory
        #   value: 64Mi
        # controller.admissionWebhooks.patchWebhookJob
        # - name: controller.admissionWebhooks.patchWebhookJob.resources.requests.cpu
        #   value: 10m
        # - name: controller.admissionWebhooks.patchWebhookJob.resources.requests.memory
        #   value: 64Mi
        # - name: controller.admissionWebhooks.patchWebhookJob.resources.limits.cpu
        #   value: 10m
        # - name: controller.admissionWebhooks.patchWebhookJob.resources.limits.memory
        #   value: 64Mi
        # defaultBackend.resources
        # - name: defaultBackend.resources.requests.cpu
        #   value: 10m
        # - name: defaultBackend.resources.requests.memory
        #   value: 64Mi
        # - name: defaultBackend.resources.limits.cpu
        #   value: 10m
        # - name: defaultBackend.resources.limits.memory
        #   value: 64Mi

        # Metrics
        - name: controller.metrics.enabled
          value: 'true'
        - name: controller.metrics.serviceMonitor.enabled
          value: 'true'
        - name: controller.metrics.serviceMonitor.additionalLabels.release
          value: prometheus-stack
        - name: controller.metrics.prometheusRule.enabled
          value: 'true'
        - name: controller.metrics.prometheusRule.additionalLabels.release
          value: prometheus-stack
        - name: controller.metrics.prometheusRule.rules[0].alert
          value: NGINXConfigFailed
        - name: controller.metrics.prometheusRule.rules[0].expr
          value: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
        - name: controller.metrics.prometheusRule.rules[0].for
          value: 1s
        - name: controller.metrics.prometheusRule.rules[0].labels.severity
          value: critical
        - name: controller.metrics.prometheusRule.rules[0].annotations.description
          value: bad ingress config - nginx config test failed
        - name: controller.metrics.prometheusRule.rules[0].annotations.summary
          value: uninstall the latest ingress changes to allow config reloads to resume
        - name: controller.metrics.prometheusRule.rules[1].alert
          value: NGINXCertificateExpiry
        - name: controller.metrics.prometheusRule.rules[1].expr
          value: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
        - name: controller.metrics.prometheusRule.rules[1].for
          value: 1s
        - name: controller.metrics.prometheusRule.rules[1].labels.severity
          value: critical
        - name: controller.metrics.prometheusRule.rules[1].annotations.description
          value: ssl certificate(s) will expire in less than a week
        - name: controller.metrics.prometheusRule.rules[1].annotations.summary
          value: renew expiring certificates to avoid downtime
        - name: controller.metrics.prometheusRule.rules[2].alert
          value: NGINXTooMany500s
        - name: controller.metrics.prometheusRule.rules[2].expr
          value: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
        - name: controller.metrics.prometheusRule.rules[2].for
          value: 1m
        - name: controller.metrics.prometheusRule.rules[2].labels.severity
          value: warning
        - name: controller.metrics.prometheusRule.rules[2].annotations.description
          value: Too many 5XXs
        - name: controller.metrics.prometheusRule.rules[2].annotations.summary
          value: More than 5% of all requests returned 5XX, this requires your attention
        - name: controller.metrics.prometheusRule.rules[3].alert
          value: NGINXTooMany500s
        - name: controller.metrics.prometheusRule.rules[3].expr
          value: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
        - name: controller.metrics.prometheusRule.rules[3].for
          value: 1m
        - name: controller.metrics.prometheusRule.rules[3].labels.severity
          value: warning
        - name: controller.metrics.prometheusRule.rules[3].annotations.description
          value: Too many 4XXs
        - name: controller.metrics.prometheusRule.rules[3].annotations.summary
          value: More than 5% of all requests returned 4XX, this requires your attention
        - name: controller.metrics.prometheusRule.rules[4].alert
          value: NGINXMetricsMissing
        - name: controller.metrics.prometheusRule.rules[4].expr
          value: absent(nginx_ingress_controller_build_info)
        - name: controller.metrics.prometheusRule.rules[4].for
          value: 15m
        - name: controller.metrics.prometheusRule.rules[4].labels.severity
          value: critical
        - name: controller.metrics.prometheusRule.rules[4].annotations.description
          value: >-
            Nginx has not reported any metrics data for the past 15 minutes which means
            that it must be down or not functioning properly.
        - name: controller.metrics.prometheusRule.rules[4].annotations.summary
          value: >-
            [ingress-nginx] No reported metrics
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true
