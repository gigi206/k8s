apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gitlab
  namespace: argo-cd
spec:
  destination:
    namespace: gitlab
    server: 'https://kubernetes.default.svc'
  source:
    chart: gitlab
    repoURL: 'https://charts.gitlab.io/'
    targetRevision: '6.2.2'
    helm:
      parameters:
        # Global => https://docs.gitlab.com/charts/charts/globals.html
        - name: global.edition
          value: ce
        - name: global.hosts.ssh
          value: ssh.gitlab.gigix
        - name: gitlab.gitlab-shell.service.annotations.external-dns\.alpha\.kubernetes\.io/hostname
          value: ssh.gitlab.gigix
        # https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell/#external-services
        # - name: global.shell.port
        #   value: '2222'
        - name: gitlab.gitlab-shell.service.type
          value: LoadBalancer
        # - name: global.shell.port
        #   value: '2222'
        # - name: gitlab.gitlab-shell.metrics.enabled
        #   value: 'true'
        # - name: gitlab.gitlab-shell.metrics.serviceMonitor.enabled
        #   value: 'true'
        # - name: gitlab.gitlab-shell.metrics.serviceMonitor.additionalLabels.release
        #   value: prometheus-stack
        - name: global.hosts.domain
          value: gitlab.gigix
        # - name: global.hosts.externalIP
        #   value: xxx.xxx.xxx.xxx
        - name: upgradeCheck.enabled
          value: 'false'
        # Storage: https://github.com/xinity/custom-gitlab/blob/master/doc/installation/storage.md
        - name: gitlab.gitaly.persistence.size
          value: 5Gi
        - name: gitlab.gitaly.persistence.storageClass
          value: longhorn
        - name: postgresql.persistence.size
          value: 3Gi
        - name: postgresql.persistence.storageClass
          value: longhorn
        - name: minio.persistence.size
          value: 2Gi
        - name: minio.persistence.storageClass
          value: longhorn
        - name: redis.persistence.size
          value: 2Gi
        - name: redis.persistence.storageClass
          value: longhorn
        # - name: global.hosts.hostSuffix
        #   value: staging
        # - name: global.hosts.gitlab.name
        #   value: gitlab.gigix
        # - name: global.hosts.gitlab.https
        #   value: 'true'
        - name: gitlab.ingress.tls.secretName
          value: gitlab-cert-tls
        # - name: global.hosts.registry.name
        #   value: registry.gitlab.gigix
        # - name: global.hosts.registry.https
        #   value: 'true'
        - name: registry.ingress.tls.secretName
          value: registry-cert-tls
        # - name: global.hosts.minio.name
        #   value: minio.gitlab.gigix
        # - name: global.hosts.minio.https
        #   value: 'true'
        - name: minio.ingress.tls.secretName
          value: minio-cert-tls
        # - name: global.hosts.smartcard.name
        #   value: smartcard.gitlab.gigix
        # - name: global.hosts.smartcard.https
        #   value: 'true'
        - name: smartcard.ingress.tls.secretName
          value: smartcard-cert-tls
        # - name: global.hosts.kas.name
        #   value: kas.gitlab.gigix
        # - name: global.hosts.kas.https
        #   value: 'true'
        - name: kas.ingress.tls.secretName
          value: kas-cert-tls
        # - name: global.hosts.pages.name
        #   value: pages.gitlab.gigix
        # - name: global.hosts.pages.https
        #   value: 'true'
        - name: pages.ingress.tls.secretName
          value: pages-cert-tls
        # - name: global.gitaly.tls.enabled
        #   value: 'true'
        - name: global.gitaly.tls.secretName
          value: gitaly-cert-tls
        # - name: global.praefect.tls.enabled
        #   value: 'true'
        - name: global.praefect.tls.secretName
          value: praefect-cert-tls
        - name: global.ingress.class
          value: nginx
        # Cf https://docs.gitlab.com/charts/installation/tls.html
        - name: global.ingress.tls.enabled
          value: 'true'
        # - name: global.ingress.annotations.cert-manager\.io/cluster-issuer
        #   value: selfsigned-cluster-issuer
        - name: global.ingress.annotations.cert-manager\.io/issuer
          value: gitlab-issuer
        - name: global.ingress.configureCertmanager
          value: 'false'
        - name: certmanager.install
          value: 'false'
        # - name: certmanager-issuer.email
        #   value: email@example.com
        - name: global.ingress.tls.secretName
          value: gitlab-cert-tls
        - name: gitlab.webservice.ingress.tls.secretName
          value: gitlab-cert-tls
        - name: global.initialRootPassword.secret
          value: initial-root-password
        - name: global.initialRootPassword.key
          value: password
        - name: nginx-ingress.enabled
          value: 'false'
        - name: prometheus.install
          value: 'false'
        - name: gitlab-runner.install
          value : 'true'
        - name: gitlab-runner.certsSecretName
          value: gitlab-cert-tls
        # Gitlab does seems working with self-signed certificate
        # Use kubectk get ing -n gitlab gitlab-webservice-default -o jsonpath="{.spec.rules[0].http.paths[0].backend.service}" | jq
        # - name: gitlab-runner.gitlabUrl
        #   value: 'http://gitlab-webservice-default:8181/'
        - name: 'gitlab-runner.envVars[0].name'
          value: CI_SERVER_TLS_CA_FILE
        - name: 'gitlab-runner.envVars[0].value'
          value: /home/gitlab-runner/.gitlab-runner/certs/ca.crt
        # If CI_SERVER_TLS_CA_FILE is not working, you can try:
        # * uncomment tls-ca-file in the [[runners]] section below
        # * edit the gitlab-gitlab-runner ConfigMap inside the register-the-runner block add the option
        # --tls-ca-file /home/gitlab-runner/.gitlab-runner/certs/ca.crt /entrypoint register
        # --tls-ca-file /home/gitlab-runner/.gitlab-runner/certs/ca.crt --template-config /configmaps/config.template.toml
        - name: redis.install
          value: 'true'
        - name: postgresql.install
          value: 'true'
        - name: global.grafana.enabled
          value: 'false'
        # https://docs.gitlab.com/runner/configuration/advanced-configuration.html
        - name: gitlab-runner.runners.config
          value: |
            # Limits how many jobs can run concurrently,
            # across all registered runners
            concurrent = 10
            # log_level = debug, info, warn, error, fatal, and panic
            [[runners]]
              # tls-ca-file = "/etc/gitlab-runner/certs/ca.crt"
              [runners.kubernetes]
                # Limit how many jobs can be handled concurrently by this registered runner
                # limit = 10
                image = "ubuntu:22.04"
                # helper_image = "gitlab/gitlab-runner-helper:x86_64-latest"
                # helper_image = "my.registry.local/gitlab/gitlab-runner-helper:x86_64-${CI_RUNNER_REVISION}"
                poll_timeout = 600
                pull_policy = "always"
                # privileged = true
                # allow_privilege_escalation = true
                # cpu_limit = "1"
                # memory_limit = "1Gi"
                # service_cpu_limit = "1"
                # service_memory_limit = "1Gi"
                # helper_cpu_limit = "500m"
                # helper_memory_limit = "100Mi"
                # image_pull_secrets = ["docker-registry-credentials", "optional-additional-credentials"]
                # allowed_images = ["ruby:*", "python:*", "php:*"]
                # allowed_services = ["postgres:9.4", "postgres:latest"]
                # pre_build_script = """
                # apk update >/dev/null
                # apk add ca-certificates >/dev/null
                # rm -rf /var/cache/apk/*
                # cp /etc/gitlab-runner/certs/ca.crt /usr/local/share/ca-certificates/ca.crt
                # update-ca-certificates --fresh > /dev/null
                # """
                # [runners.kubernetes.node_selector]
                #   gitlab = "true"
                [runners.kubernetes.volumes]
                  [[runners.kubernetes.volumes.secret]]
                    name = "gitlab-tls-ca-key-pair"
                    mount_path = "/etc/gitlab-runner/certs/"
                    read_only = true
                    [runners.kubernetes.volumes.secret.items]
                      "tls.crt" = "ca.crt"
              [runners.cache]
                Type = "s3"
                Path = "gitlab-runner"
                Shared = true
                [runners.cache.s3]
                  # ServerAddress = "minio.gitlab.gigix" # internal chart minio ingress
                  ServerAddress = "gitlab-minio-svc:9000" # internal minio chart direct link
                  Insecure = true
                  # BucketName = "gitlab-runner-cache"
                  BucketName = "runner-cache"
                  BucketLocation = "us-east-1"
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true