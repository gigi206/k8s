apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-apisix
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: ingress-apisix
    server: 'https://kubernetes.default.svc'
  sources:
    - chart: apisix
      repoURL: 'https://charts.apiseven.com'
      targetRevision: 2.3.1
      helm:
        values: |
          dashboard:
            ingress:
              annotations:
                k8s.apisix.apache.org/use-regex: "true"
                cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
        parameters:
          - name: useDaemonSet
            value: 'false'
          - name: service.type
            value: LoadBalancer
          - name: service.stream.enabled
            value: 'true'
          - name: ingress.enabled
            value: 'false'
          # https://apisix.apache.org/docs/apisix/deployment-modes/#standalone
          - name: apisix.deployment.mode
            value: standalone
          - name: apisix.deployment.role
            value: data_plane
          - name: apisix.deployment.role_data_plane.config_provider
            value: yaml
          - name: apisix.admin.enabled
            value: 'true'
          # CHANGEME !!!
          - name: apisix.admin.credentials.admin
            value: edd1c9f034335f136f87ad84b625c8f1
          # CHANGEME !!!
          - name: apisix.admin.credentials.viewer
            value: 4054f7cf07e344346cd3f287985e76a2
          - name: priorityClassName
            value: system-cluster-critical
          - name: gateway.tls.enabled # https://apisix.apache.org/docs/ingress-controller/tutorials/manage-certificates-with-cert-manager/
            value: 'true'
          - name: gateway.ssl.enabled
            value: 'true'
          - name: gateway.tls.containerPort
            value: '443'
          - name: apisix.ssl.enabled
            value: 'true'
          - name: apisix.ssl.containerPort
            value: '443'
          - name: apisix.pluginAttrs.redirect.https_port
            value: '443'
          - name: replicaCount
            value: '1'
          - name: autoscaling.enabled
            value: 'false'
          - name: autoscaling.minReplicas
            value: '2'
          - name: autoscaling.maxReplicas
            value: '10'
          - name: autoscaling.targetCPUUtilizationPercentage
            value: '70'
          - name: rbac.create
            value: 'true'
          - name: metrics.serviceMonitor.enabled
            value: 'true'
          - name: metrics.serviceMonitor.labels.release
            value: prometheus-stack
          - name: apisix.enableIPv6
            value: 'false'
          # Cf https://artifacthub.io/packages/helm/apisix/apisix-ingress-controller?modal=values
          - name: ingress-controller.enabled
            value: 'true'
          - name: ingress-controller.config.etcdserver.enabled
            value: 'false'
          - name: ingress-controller.config.kubernetes.enableGatewayAPI
            value: 'true'
          - name: ingress-controller.config.apisixResourceSyncInterval
            value: 1m # 1h by default
          - name: ingress-controller.config.kubernetes.resyncInterval
            value: 1m # 6h by default
          - name: ingress-controller.config.kubernetes.watchEndpointSlices
            value: 'true'
          - name: ingress-controller.config.apisix.serviceName
            value: ingress-apisix-admin
          - name: ingress-controller.priorityClassName
            value: system-cluster-critical
          - name: ingress-controller.config.kubernetes.electionId
            value: ingress-apisix-leader
          - name: ingress-controller.config.apisix.serviceNamespace
            value: ingress-apisix
          - name: ingress-controller.config.ingressPublishService
            value: ingress-apisix/ingress-apisix-gateway
          - name: ingress-controller.config.apisix.existingSecret
            value: admin
          - name: ingress-controller.config.apisix.existingSecretAdminKeyKey
            value: adminKey
          # ADMIN_API_VERSION => https://apisix.apache.org/docs/ingress-controller/deployments/kind/#install-apisix-and-ingress-controller
          # - name: ingress-controller.config.apisix.adminAPIVersion
          #   value: v3
          # - name: ingress-controller.config.apisix.adminKey
          #   value: xxx
          # - name: ingress-controller.config.apisix.clusterName
          #   value: default
          # Cf https://artifacthub.io/packages/helm/apisix/apisix-dashboard?modal=values
          # etcd is disabled in the standalone mode, so the dashboard must be disabled
          - name: dashboard.enabled
            value: 'false'
          # - name: dashboard.config.authentication.users[0].username
          #   value: admin
          # - name: dashboard.config.authentication.users[0].password
          #   value: admin
          # - name: dashboard.config.conf.etcd.endpoints[0]
          #   value: ingress-apisix-etcd:2379
          # - name: dashboard.ingress.enabled
          #   value: 'true'
          # - name: dashboard.ingress.className
          #   value: apisix
          # - name: dashboard.ingress.hosts[0].host
          #   value: apisix-dashboard.gigix
          # - name: dashboard.ingress.hosts[0].paths[0]
          #   value: /
          # - name: dashboard.ingress.tls[0].secretName
          #   value: apisix-dashboard-tls
          # - name: dashboard.ingress.tls[0].hosts[0]
          #   value: apisix.gigix
          - name: externalEtcd.user
            value: null
          # Cf https://artifacthub.io/packages/helm/bitnami/etcd
          # No etcd required with standalone mode => https://apisix.apache.org/docs/apisix/deployment-modes/#standalone
          - name: etcd.enabled
            value: 'false'
          # - name: etcd.replicaCount
          #   value: '1'
          # - name: etcd.persistence.enabled
          #   value: 'false'
          # - name: etcd.persistence.size
          #   value: 1Gi
          # - name: etcd.persistence.storageClass
          #   value: local-path
          #   # value: longhorn
    - repoURL: 'https://github.com/gigi206/k8s'
      path: argocd/ingress-apisix/install
      targetRevision: HEAD
      directory:
        include: '*.yaml'
  project: default
  syncPolicy:
    syncOptions:
      - PruneLast=true
      - ServerSideApply=true
      - CreateNamespace=true
