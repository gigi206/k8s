# Auth with kubernetes with ClusterSecretStore
kind: ClusterSecretStore
metadata:
  name: vault-backend
spec:
  provider:
    vault:
      server: http://vault-internal.vault:8200
      path: kv
      version: v2
      auth:
        kubernetes:
          mountPath: kubernetes
          role: k8s
          serviceAccountRef:
            name: default
            namespace: demo
---
# Auth by a token named vault-token with the key named token with SecretStore (namespaced)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: demo
spec:
  provider:
    vault:
      server: http://vault-internal.vault:8200
      path: kv
      version: v2
      auth:
        # kubernetes:
        #  mountPath: kubernetes
        #  role: k8s
        tokenSecretRef:
          name: vault-token
          key: token
          # namespace: xxx
---
# Use ClusterSecretStore instead of SecretStore
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mypassword2
  namespace: demo
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: password2
  data:
  - secretKey: MyPassword
    remoteRef:
      key: demo/config
      property: password
---
# Specific keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mypassword
  namespace: demo
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    immutable: true
    name: password
  data:
  - secretKey: MyPassword
    remoteRef:
      key: demo/config
      property: password
  # metadataPolicy to fetch vault metadata in json format
  - secretKey: tags
    remoteRef:
      metadataPolicy: Fetch
      key: demo/config
  # metadataPolicy to fetch vault metadata meta1
  - secretKey: meta1
    remoteRef:
      metadataPolicy: Fetch
      key: demo/config
      property: meta1
---
# All keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gigix
  namespace: demo
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: gigix
  dataFrom:
  - extract:
      key: demo/config
---
# Template
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: template
  namespace: demo
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    deletionPolicy: Delete
    name: template
    template:
      engineVersion: v2
      data:
        uri: "tcp://localhost:{{ .username }}:{{ .password }}"
  dataFrom:
  - extract:
      key: demo/config
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: pushsecret
  namespace: demo
spec:
  deletionPolicy: Delete # the provider' secret will be deleted if the PushSecret is deleted
  refreshInterval: 10s
  secretStoreRefs:
    - name: vault-backend
      kind: SecretStore
  selector:
    secret:
      name: pushsecret
  data:
    - match:
        secretKey: mysecret
        remoteRef:
          remoteKey: secret